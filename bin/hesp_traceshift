#!/Users/arun/anaconda3/bin/python
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.colors import LogNorm
import numpy, time
import peakutils
from astropy.io import fits
from scipy.ndimage import morphology as morph
from scipy.ndimage import filters
import os
from scipy import interpolate
import progressbar
from time import sleep
from ccdproc import  cosmicray_lacosmic
import copy
import sys
from matplotlib.widgets import Slider,Button
import configparser
from os.path import expanduser
from astropy.visualization import (MinMaxInterval, SqrtStretch,LogStretch,ZScaleInterval,HistEqStretch,LinearStretch,
                                   PowerStretch,ImageNormalize,simple_norm)
home = expanduser("~")

#Parse the config parameters
Config=configparser.ConfigParser()
Config.read(home+'/'+'hesp.config')
objname=Config.get('Headers','objname')
objtype=Config.get('Headers','objtype')
reseltype=Config.get('Headers','reseltype')
dateobs=Config.get('Headers','dateobs')
exptime=Config.get('Headers','exptime')
reselkeylow=Config.get('Keys','reselkeylow')
reselkeyhigh=Config.get('Keys','reselkeyhigh')
biaskey=Config.get('Keys','biaskey')
flatkey=Config.get('Keys','flatkey')
calibkey=Config.get('Keys','calibkey')
objectkey=Config.get('Keys','objectkey')
fits_index=int(Config.get('Fits','index'))
binsize=float(Config.get('Extraction','binsize'))
binres=float(Config.get('Extraction','binres'))
path=Config.get('Config','path')
directory=Config.get('Headers','directory')
fiber1=[]
fiber2=[]
fig, ax = plt.subplots()
plt.subplots_adjust(left=0.15, bottom=0.25)

fl=sys.argv[1]
hdu=fits.open(fl)
scidata=hdu[0].data

if sys.argv[2]=='low':
    trfl = path+'lowresfiber1.trace'
else:
    trfl = path+'highresfiber1.trace'

data=np.loadtxt(trfl)
for l in range(data.shape[0]):
 cp=data[l]
 fiber1.append(cp)
 p=np.poly1d(cp)
 x_f=x=np.arange(0,4096,1)
 y_f=p(x_f)     
 ax.plot(x_f,y_f,color='red')
 
if sys.argv[2]=='low':
    trfl = path+'lowresfiber2.trace'
else:
    trfl = path+'highresfiber2.trace'


data=np.loadtxt(trfl)
for l in range(data.shape[0]):
 cp=data[l]
 fiber2.append(cp)
 p=np.poly1d(cp)
 x_f=x=np.arange(0,4096,1)
 y_f=p(x_f)     
 ax.plot(x_f,y_f,color='blue')

def update(val):
            global fiber1,fiber2
            global dist
            dist=shift.val
            ax.cla()        
            for cp in fiber1:
                p=np.poly1d(cp)
                x_f=x=np.arange(0,4096,1)
                y_f=p(x_f)     
            f.canvas.draw_idle()

def process(val):
            global fiber1,fiber2,scidata
            print('Retracing...')
            global dist
            dist=shift.val
            ylim= ax.get_ylim()
            xlim= ax.get_xlim()
            ax.cla()
            ax.imshow(scidata, cmap=cm.gray, origin='lower', norm=LogNorm())
            i=0     
            for cp in fiber1:
                        scatfity=[]
                        scatfitx=[]
                        p=np.poly1d(cp)
                        for x0 in range(0,4095,1):
                                y0=p(x0)+dist
                                scatfity=numpy.append(scatfity,y0)
                                scatfitx=numpy.append(scatfitx,x0)          
                        ax.plot(scatfitx,scatfity,color='red') 
                        i=i+1
            i=0      
            for cp in fiber2:
                        scatfity=[]
                        scatfitx=[]
                        p=np.poly1d(cp)
                        for x0 in range(0,4095,1):
                                y0=p(x0)+dist
                                scatfity=numpy.append(scatfity,y0)
                                scatfitx=numpy.append(scatfitx,x0)          
                        ax.plot(scatfitx,scatfity,color='blue') 
                        i=i+1

            ax.set_xlim(xlim)
            ax.set_ylim(ylim)
            norm=simple_norm(abs(scidata),'log')
            ax.imshow(scidata, cmap=cm.gray, origin='lower', norm=norm)
            fig.canvas.draw()  
            print('Finished')  
            print(shift.val)

def savetrace(val):
     global fiber1,fiber2,resflag
     print('Writing trace files...')
     if sys.argv[2]=='low':
         f1 = 'lowresfiber1.trace'
         f2 = 'lowresfiber2.trace'
     else:
         f1 = 'highresfiber1.trace'
         f2 = 'highresfiber2.trace'     
     fl1 = np.loadtxt(path+f1)
     fl2 = np.loadtxt(path+f2)             
     global dist
     dist=shift.val   
     fl1[:,3]= fl1[:,3]+dist
     fl2[:,3]= fl2[:,3]+dist
     np.savetxt(path+f1,fl1)
     np.savetxt(path+f2,fl2)
     print('Finished')    

axcolor = 'lightgoldenrodyellow' 
axshift = plt.axes([0.25, 0.1, 0.65, 0.03])
axbutton1= plt.axes([0.25, 0.05, 0.1, 0.04] )
axbutton2= plt.axes([0.35, 0.05, 0.1, 0.04])
shift = Slider(axshift, 'Shift in Pixels', -10, 10.0, valinit=0) 
button1= Button(axbutton1,'Retrace')
button2= Button(axbutton2,'Save')
norm=simple_norm(abs(scidata),'log')
ax.imshow(scidata, cmap=cm.gray, origin='lower', norm=norm)
#shift.on_changed(update)
button1.on_clicked(process)
button2.on_clicked(savetrace)
plt.show()
